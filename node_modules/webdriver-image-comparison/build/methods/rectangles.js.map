{"version":3,"file":"rectangles.js","sourceRoot":"","sources":["../../lib/methods/rectangles.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAkH;AAClH,qDAA8G;AAC9G,kDAA6C;AAS7C,0GAAqG;AACrG,kHAA6G;AAK7G,SAAsB,0BAA0B,CAC9C,QAAkB,EAClB,UAAkB,EAClB,OAAiC,EACjC,OAAY;;;;;;oBAGL,gBAAgB,GAAiE,OAAO,iBAAxE,EAAE,WAAW,GAAoD,OAAO,YAA3D,EAAE,SAAS,GAAyC,OAAO,UAAhD,EAAE,4BAA4B,GAAW,OAAO,6BAAlB,EAAE,KAAK,GAAI,OAAO,MAAX,CAAY;oBACzF,MAAM,GAAI,yBAAiB,CAAC,UAAU,EAAE,gBAAgB,CAAC,OAAnD,CAAoD;yBAI7D,KAAK,EAAL,cAAK;oBACW,WAAM,uCAAqB,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAA;;oBAAhE,eAAe,GAAG,SAA8C,CAAC;;;yBACxD,SAAS,EAAT,cAAS;oBACA,WAAM,2CAAyB,CAAC,QAAQ,EAAE,4BAA4B,EAAE,OAAO,CAAC,EAAA;;oBAAlG,eAAe,GAAG,SAAgF,CAAC;;wBAEjF,WAAM,2CAAyB,CAAC,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAA;;oBAAzF,eAAe,GAAG,SAAuE,CAAC;;wBAI5F,WAAO,wBAAgB,CAAC;wBACtB,MAAM,EAAE,eAAe,CAAC,MAAM;wBAC9B,KAAK,EAAE,eAAe,CAAC,KAAK;wBAC5B,CAAC,EAAE,eAAe,CAAC,CAAC;wBACpB,CAAC,EAAE,eAAe,CAAC,CAAC;qBACrB,EAAE,gBAAgB,CAAC,EAAC;;;;CACtB;AA3BD,gEA2BC;AAKD,SAAgB,yBAAyB,CAAC,UAAkB,EAAE,OAAgC;IAG1F,IAAA,2CAAgB,EAChB,iCAAW,EACX,+BAAU,EACV,qBAAK,EACL,yEAA+B,EAC/B,mEAA4B,CAClB;IACN,IAAA,4DAAiE,EAAhE,kBAAM,EAAE,gBAAwD,CAAC;IAGxE,IAAM,eAAe,GAAG,+BAA+B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC;IAG7E,OAAO,wBAAgB,CAAC;QACtB,MAAM,EAAE,KAAK,IAAI,4BAA4B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;QACpE,KAAK,EAAE,eAAe;QACtB,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;KACL,EAAE,gBAAgB,CAAC,CAAC;AACvB,CAAC;AAtBD,8DAsBC;AAKD,SAAsB,uCAAuC,CAC3D,QAAkB,EAClB,OAA8C;;;;;;oBAG5C,iBAAiB,GAMf,OAAO,kBANQ,EACjB,eAAe,GAKb,OAAO,gBALM,EACf,QAAQ,GAIN,OAAO,SAJD,EACR,oBAAoB,GAGlB,OAAO,qBAHW,EACpB,YAAY,GAEV,OAAO,aAFG,EACZ,4BAA4B,GAC1B,OAAO,6BADmB,CAClB;oBACN,UAAU,GAAG,EAAE,CAAC;yBAElB,CAAA,oBAAoB,IAAI,QAAQ;wBAClC,CAAC,uCAA+B,CAAC,YAAY,EAAE,4BAA4B,CAAC,IAAI,kBAAU,CAAC,YAAY,CAAC,CAAC,CAAA,EADvG,cACuG;oBAErE,WAAM,CAAC,kBAAU,CAAC,YAAY,CAAC,CAAC,CAAC;4BACnE,QAAQ,CAAC,0CAAgC,EAAE,mBAAO,CAAC,GAAG,CAAC,CAAC,CAAC;4BACzD,QAAQ,CAAC,8CAAoC,EAAE,mBAAO,CAAC,OAAO,CAAC,CAAC,EAAA;;oBAF5D,KAA8B,SAE8B,EAF3D,gBAAgB,sBAAA,EAAE,OAAO,aAAA;oBAIhC,IAAI,iBAAiB,EAAE;wBACrB,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;qBACnC;oBAED,IAAI,eAAe,EAAE;wBACnB,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC1B;;wBAGH,WAAO,UAAU,EAAC;;;;CACnB;AA/BD,0FA+BC","sourcesContent":["import {calculateDprData, checkAndroidNativeWebScreenshot, checkIsIos, getScreenshotSize} from '../helpers/utils';\nimport {getElementPositionAndroid, getElementPositionDesktop, getElementPositionIos} from './elementPosition';\nimport {OFFSETS} from '../helpers/constants';\nimport {\n  ElementRectanglesOptions,\n  RectanglesOutput,\n  ScreenRectanglesOptions,\n  StatusAddressToolBarRectangles,\n  StatusAddressToolBarRectanglesOptions\n} from './rectangles.interfaces';\nimport {Executor} from './methods.interface';\nimport getIosStatusAddressToolBarHeight from '../clientSideScripts/getIosStatusAddressToolBarHeight';\nimport getAndroidStatusAddressToolBarHeight from '../clientSideScripts/getAndroidStatusAddressToolBarHeight';\n\n/**\n * Determine the element rectangles on the page / screenshot\n */\nexport async function determineElementRectangles(\n  executor: Executor,\n  screenshot: string,\n  options: ElementRectanglesOptions,\n  element: any,\n): Promise<RectanglesOutput> {\n  // Determine screenshot data\n  const {devicePixelRatio, innerHeight, isAndroid, isAndroidNativeWebScreenshot, isIos} = options;\n  const {height} = getScreenshotSize(screenshot, devicePixelRatio);\n  let elementPosition;\n\n  // Determine the element position on the screenshot\n  if (isIos) {\n    elementPosition = await getElementPositionIos(executor, element);\n  } else if (isAndroid) {\n    elementPosition = await getElementPositionAndroid(executor, isAndroidNativeWebScreenshot, element);\n  } else {\n    elementPosition = await getElementPositionDesktop(executor, innerHeight, height, element);\n  }\n\n  // Determine the rectangles based on the device pixel ratio\n  return calculateDprData({\n    height: elementPosition.height,\n    width: elementPosition.width,\n    x: elementPosition.x,\n    y: elementPosition.y,\n  }, devicePixelRatio);\n}\n\n/**\n * Determine the rectangles of the screen for the screenshot\n */\nexport function determineScreenRectangles(screenshot: string, options: ScreenRectanglesOptions): RectanglesOutput {\n  // Determine screenshot data\n  const {\n    devicePixelRatio,\n    innerHeight,\n    innerWidth,\n    isIos,\n    isAndroidChromeDriverScreenshot,\n    isAndroidNativeWebScreenshot,\n  } = options;\n  const {height, width} = getScreenshotSize(screenshot, devicePixelRatio);\n\n  // Determine the width\n  const screenshotWidth = isAndroidChromeDriverScreenshot ? width : innerWidth;\n\n  // Determine the rectangles\n  return calculateDprData({\n    height: isIos || isAndroidNativeWebScreenshot ? height : innerHeight,\n    width: screenshotWidth,\n    x: 0,\n    y: 0\n  }, devicePixelRatio);\n}\n\n/**\n * Determine the rectangles for the mobile devices\n */\nexport async function determineStatusAddressToolBarRectangles(\n  executor: Executor,\n  options: StatusAddressToolBarRectanglesOptions,\n): Promise<StatusAddressToolBarRectangles> {\n  const {\n    blockOutStatusBar,\n    blockOutToolBar,\n    isMobile,\n    isViewPortScreenshot,\n    platformName,\n    isAndroidNativeWebScreenshot,\n  } = options;\n  const rectangles = [];\n\n  if (isViewPortScreenshot && isMobile &&\n    (checkAndroidNativeWebScreenshot(platformName, isAndroidNativeWebScreenshot) || checkIsIos(platformName))\n  ) {\n    const {statusAddressBar, toolBar} = await (checkIsIos(platformName) ?\n      executor(getIosStatusAddressToolBarHeight, OFFSETS.IOS) :\n      executor(getAndroidStatusAddressToolBarHeight, OFFSETS.ANDROID));\n\n    if (blockOutStatusBar) {\n      rectangles.push(statusAddressBar);\n    }\n\n    if (blockOutToolBar) {\n      rectangles.push(toolBar);\n    }\n  }\n\n  return rectangles;\n}\n"]}