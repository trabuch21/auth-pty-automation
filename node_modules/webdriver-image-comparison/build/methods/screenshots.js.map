{"version":3,"file":"screenshots.js","sourceRoot":"","sources":["../../lib/methods/screenshots.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0EAAqE;AACrE,wFAAmF;AACnF,kHAA6G;AAC7G,0GAAqG;AACrG,kDAA6C;AAC7C,0CAA8E;AAS9E,8EAAyE;AACzE,sEAAiE;AAKjE,SAAsB,gCAAgC,CACpD,cAA8B,EAC9B,QAAkB,EAClB,OAAsC;;;;;;oBAGpC,uBAAuB,GAUrB,OAAO,wBAVc,EACvB,gBAAgB,GASd,OAAO,iBATO,EAChB,qBAAqB,GAQnB,OAAO,sBARY,EACrB,oBAAoB,GAOlB,OAAO,qBAPW,EACpB,WAAW,GAMT,OAAO,YANE,EACX,SAAS,GAKP,OAAO,UALA,EACT,4BAA4B,GAI1B,OAAO,6BAJmB,EAC5B,+BAA+B,GAG7B,OAAO,gCAHsB,EAC/B,KAAK,GAEH,OAAO,MAFJ,EACL,oBAAoB,GAClB,OAAO,qBADW,CACV;oBACN,cAAc,GAAG;wBACrB,gBAAgB,kBAAA;wBAChB,qBAAqB,uBAAA;wBACrB,oBAAoB,sBAAA;wBACpB,WAAW,aAAA;qBACZ,CAAC;oBACI,mBAAmB,yBACpB,cAAc,KACjB,uBAAuB,yBAAA;wBACvB,oBAAoB,sBAAA,GACrB,CAAC;yBAEE,CAAA,SAAS,IAAI,4BAA4B,CAAA,EAAzC,cAAyC;oBAGZ,WAAM,QAAQ,CAAC,8CAAoC,EAAE,mBAAO,CAAC,OAAO,CAAC,EAAA;;oBAD9F,sBAAsB,GACE,CAAC,SAAqE,CACnG,CAAC,gBAAgB,CAAC,MAAM;oBACnB,0BAA0B,yBAAO,mBAAmB,KAAE,sBAAsB,wBAAA,GAAC,CAAC;oBAEpF,WAAO,sCAAsC,CAAC,cAAc,EAAE,QAAQ,EAAE,0BAA0B,CAAC,EAAC;;yBAC3F,CAAA,SAAS,IAAI,+BAA+B,CAAA,EAA5C,cAA4C;oBAC/C,mBAAmB,GAAG,EAAC,gBAAgB,kBAAA,EAAE,qBAAqB,uBAAA,EAAE,oBAAoB,sBAAA,EAAE,WAAW,aAAA,EAAC,CAAC;oBAGzG,WAAO,6CAA6C,CAAC,cAAc,EAAE,QAAQ,EAAE,mBAAmB,CAAC,EAAC;;yBAC3F,KAAK,EAAL,cAAK;oBAGiB,WAAM,QAAQ,CAAC,0CAAgC,EAAE,mBAAO,CAAC,GAAG,CAAC,EAAA;;oBADtF,sBAAsB,GACE,CAAC,SAA6D,CAC3F,CAAC,gBAAgB,CAAC,MAAM;oBACnB,sBAAsB,yBAAO,mBAAmB,KAAE,sBAAsB,wBAAA,GAAC,CAAC;oBAEhF,WAAO,sCAAsC,CAAC,cAAc,EAAE,QAAQ,EAAE,sBAAsB,CAAC,EAAC;wBAIlG,WAAO,iCAAiC,CAAC,cAAc,EAAE,QAAQ,EAAE,cAAc,CAAC,EAAC;;;;CACpF;AAtDD,4EAsDC;AAKD,SAAsB,sCAAsC,CAC1D,cAA8B,EAC9B,QAAkB,EAClB,OAA8C;;;;;;oBAExC,mBAAmB,GAAG,EAAE,CAAC;oBAK7B,uBAAuB,GAOrB,OAAO,wBAPc,EACvB,gBAAgB,GAMd,OAAO,iBANO,EAChB,qBAAqB,GAKnB,OAAO,sBALY,EACrB,oBAAoB,GAIlB,OAAO,qBAJW,EACpB,WAAW,GAGT,OAAO,YAHE,EACX,sBAAsB,GAEpB,OAAO,uBAFa,EACtB,oBAAoB,GAClB,OAAO,qBADW,CACV;oBACN,iBAAiB,GAAG,WAAW,GAAG,uBAAuB,GAAG,oBAAoB,CAAC;oBAGjF,oBAAoB,GAAG,EAAE,CAAC;oBAIvB,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAA;oBAExC,YAAU,iBAAiB,GAAG,CAAC,CAAC;oBACtC,WAAM,QAAQ,CAAC,0BAAgB,EAAE,SAAO,CAAC,EAAA;;oBAAzC,SAAyC,CAAC;oBAG1C,WAAM,QAAQ,CAAC,wBAAc,EAAE,IAAI,CAAC,EAAA;;oBAApC,SAAoC,CAAC;oBAGrC,WAAM,eAAO,CAAC,qBAAqB,CAAC,EAAA;;oBAApC,SAAoC,CAAC;yBAGjC,CAAA,CAAC,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA1C,cAA0C;oBAC5C,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAC,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAC,EAAE,IAAI,CAAC,EAAA;;oBAAlF,SAAkF,CAAC;;wBAIlE,WAAM,oBAAoB,CAAC,cAAc,CAAC,EAAA;;oBAAvD,UAAU,GAAG,SAA0C;oBAC7D,mBAAmB,GAAG,yBAAiB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,KAAK,CAAC;oBAG7D,WAAM,QAAQ,CAAC,iCAAuB,CAAC,EAAA;;oBAAtD,YAAY,GAAG,SAAuC,CAAC;oBACvD,IAAI,CAAC,CAAC,SAAO,GAAG,iBAAiB,CAAC,GAAG,YAAY,CAAC,EAAE;wBAClD,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;qBACxD;oBAIK,WAAW,GAAG,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,SAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC;oBAI7F,cAAc,GAAG,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,sBAAsB,GAAG,uBAAuB,CAAC;oBAG9I,mBAAmB,CAAC,IAAI,uBACnB,wBAAgB,CAAC;wBAClB,WAAW,EAAE,mBAAmB;wBAChC,eAAe,EAAE,SAAO;wBACxB,WAAW,EAAE,WAAW;wBACxB,UAAU,EAAE,mBAAmB;wBAC/B,cAAc,EAAE,cAAc;qBAC/B,EAAE,gBAAgB,CAAC,KACpB,UAAU,YAAA,IACV,CAAC;oBAGH,WAAM,QAAQ,CAAC,wBAAc,EAAE,KAAK,CAAC,EAAA;;oBAArC,SAAqC,CAAC;;;oBA/CU,CAAC,EAAE,CAAA;;;yBAmDjD,CAAA,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA/B,eAA+B;oBACjC,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAC,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAC,EAAE,KAAK,CAAC,EAAA;;oBAAnF,SAAmF,CAAC;;yBAGtF,iCACK,wBAAgB,CAAC;wBAClB,cAAc,EAAE,YAAY,GAAG,uBAAuB,GAAG,oBAAoB;wBAC7E,aAAa,EAAE,mBAAmB;qBACnC,EAAE,gBAAgB,CAAC,KACpB,IAAI,EAAE,mBAAmB,KACzB;;;;CACH;AAvFD,wFAuFC;AAKD,SAAsB,6CAA6C,CACjE,cAA8B,EAC9B,QAAkB,EAClB,OAAkC;;;;;;oBAE5B,mBAAmB,GAAG,EAAE,CAAC;oBACxB,gBAAgB,GAA8D,OAAO,iBAArE,EAAE,qBAAqB,GAAuC,OAAO,sBAA9C,EAAE,oBAAoB,GAAiB,OAAO,qBAAxB,EAAE,WAAW,GAAI,OAAO,YAAX,CAAY;oBAGvF,oBAAoB,GAAG,EAAE,CAAC;oBAIvB,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAA;oBAExC,YAAU,WAAW,GAAG,CAAC,CAAC;oBAChC,WAAM,QAAQ,CAAC,0BAAgB,EAAE,SAAO,CAAC,EAAA;;oBAAzC,SAAyC,CAAC;oBAG1C,WAAM,QAAQ,CAAC,wBAAc,EAAE,IAAI,CAAC,EAAA;;oBAApC,SAAoC,CAAC;oBAGrC,WAAM,eAAO,CAAC,qBAAqB,CAAC,EAAA;;oBAApC,SAAoC,CAAC;yBAGjC,CAAA,CAAC,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA1C,cAA0C;oBAC5C,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAC,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAC,EAAE,IAAI,CAAC,EAAA;;oBAAlF,SAAkF,CAAC;;wBAIlE,WAAM,oBAAoB,CAAC,cAAc,CAAC,EAAA;;oBAAvD,UAAU,GAAG,SAA0C;oBAC7D,cAAc,GAAG,yBAAiB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;oBAGlD,WAAM,QAAQ,CAAC,iCAAuB,CAAC,EAAA;;oBAAtD,YAAY,GAAG,SAAuC,CAAC;oBACvD,IAAI,CAAC,SAAO,GAAG,WAAW,CAAC,GAAG,YAAY,EAAE;wBAC1C,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;qBACxD;oBAIK,WAAW,GAAW,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,CAAC,WAAW,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;oBAElI,cAAc,GAAG,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBAGhI,mBAAmB,CAAC,IAAI,uBACnB,wBAAgB,CAAC;wBAClB,WAAW,EAAE,cAAc,CAAC,KAAK;wBACjC,eAAe,EAAE,SAAO;wBACxB,WAAW,EAAE,WAAW;wBACxB,UAAU,EAAE,cAAc,CAAC,KAAK;wBAChC,cAAc,EAAE,cAAc;qBAC/B,EAAE,gBAAgB,CAAC,KACpB,UAAU,YAAA,IACV,CAAC;oBAGH,WAAM,QAAQ,CAAC,wBAAc,EAAE,KAAK,CAAC,EAAA;;oBAArC,SAAqC,CAAC;;;oBA7CU,CAAC,EAAE,CAAA;;;yBAiDjD,CAAA,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA/B,eAA+B;oBACjC,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAC,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAC,EAAE,KAAK,CAAC,EAAA;;oBAAnF,SAAmF,CAAC;;yBAGtF,iCACK,wBAAgB,CAAC;wBAClB,cAAc,EAAE,YAAY;wBAC5B,aAAa,EAAE,cAAc,CAAC,KAAK;qBACpC,EAAE,gBAAgB,CAAC,KACpB,IAAI,EAAE,mBAAmB,KACzB;;;;CACH;AAzED,sGAyEC;AAKD,SAAsB,iCAAiC,CACrD,cAA8B,EAC9B,QAAkB,EAClB,OAAkC;;;;;;oBAE5B,mBAAmB,GAAG,EAAE,CAAC;oBACxB,gBAAgB,GAA8D,OAAO,iBAArE,EAAE,qBAAqB,GAAuC,OAAO,sBAA9C,EAAE,oBAAoB,GAAiB,OAAO,qBAAxB,EAAE,WAAW,GAAI,OAAO,YAAX,CAAY;oBACzF,iBAAiB,GAAG,WAAW,CAAC;oBAG9B,oBAAoB,GAAG,EAAE,CAAC;oBAIvB,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAA;oBAExC,YAAU,iBAAiB,GAAG,CAAC,CAAC;oBACtC,WAAM,QAAQ,CAAC,0BAAgB,EAAE,SAAO,CAAC,EAAA;;oBAAzC,SAAyC,CAAC;oBAG1C,WAAM,eAAO,CAAC,qBAAqB,CAAC,EAAA;;oBAApC,SAAoC,CAAC;yBAGjC,CAAA,CAAC,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA1C,cAA0C;oBAC5C,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAC,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAC,EAAE,IAAI,CAAC,EAAA;;oBAAlF,SAAkF,CAAC;;wBAIlE,WAAM,oBAAoB,CAAC,cAAc,CAAC,EAAA;;oBAAvD,UAAU,GAAG,SAA0C;oBAC7D,cAAc,GAAG,yBAAiB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;oBAIjE,IAAI,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,MAAM,KAAK,iBAAiB,EAAE;wBAC1D,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,iBAAiB,EAAE;4BAC3D,iBAAiB,GAAG,cAAc,CAAC,MAAM,CAAC;yBAC3C;qBAGF;oBAGc,WAAM,QAAQ,CAAC,iCAAuB,CAAC,EAAA;;oBAAtD,YAAY,GAAG,SAAuC,CAAC;oBAEvD,IAAI,CAAC,CAAC,SAAO,GAAG,iBAAiB,CAAC,GAAG,YAAY,IAAI,cAAc,CAAC,MAAM,KAAK,iBAAiB,CAAC,EAAE;wBACjG,oBAAoB,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;qBACxD;oBAKK,WAAW,GAAW,oBAAoB,CAAC,MAAM,KAAK,CAAC;wBAC3D,CAAC,CAAC,YAAY,GAAG,CAAC,iBAAiB,GAAG,mBAAmB,CAAC,MAAM,CAAC;wBACjE,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC;oBAEpB,cAAc,GAAG,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;oBAGtI,mBAAmB,CAAC,IAAI,uBACnB,wBAAgB,CAAC;wBAClB,WAAW,EAAE,cAAc,CAAC,KAAK;wBACjC,eAAe,EAAE,SAAO;wBACxB,WAAW,EAAE,WAAW;wBACxB,UAAU,EAAE,cAAc,CAAC,KAAK;wBAChC,cAAc,EAAE,cAAc;qBAC/B,EAAE,gBAAgB,CAAC,KACpB,UAAU,YAAA,IACV,CAAC;;;oBArD6C,CAAC,EAAE,CAAA;;;yBAyDjD,CAAA,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAA,EAA/B,eAA+B;oBACjC,WAAM,QAAQ,CAAC,4BAAkB,EAAE,EAAC,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,EAAE,EAAC,EAAE,KAAK,CAAC,EAAA;;oBAAnF,SAAmF,CAAC;;yBAGtF,iCACK,wBAAgB,CAAC;wBAClB,cAAc,EAAE,YAAY;wBAC5B,aAAa,EAAE,cAAc,CAAC,KAAK;qBACpC,EAAE,gBAAgB,CAAC,KACpB,IAAI,EAAE,mBAAmB,KACzB;;;;CACH;AAlFD,8EAkFC;AAKD,SAAsB,oBAAoB,CAAC,cAA8B;;;YACvE,WAAO,cAAc,EAAE,EAAC;;;CACzB;AAFD,oDAEC","sourcesContent":["import scrollToPosition from '../clientSideScripts/scrollToPosition';\nimport getDocumentScrollHeight from '../clientSideScripts/getDocumentScrollHeight';\nimport getAndroidStatusAddressToolBarHeight from '../clientSideScripts/getAndroidStatusAddressToolBarHeight';\nimport getIosStatusAddressToolBarHeight from '../clientSideScripts/getIosStatusAddressToolBarHeight';\nimport {OFFSETS} from '../helpers/constants';\nimport {calculateDprData, getScreenshotSize, waitFor} from '../helpers/utils';\nimport {Executor, TakeScreenShot} from './methods.interface';\nimport {\n  FullPageScreenshotOptions,\n  FullPageScreenshotNativeMobileOptions,\n  FullPageScreenshotDataOptions,\n  FullPageScreenshotsData,\n} from './screenshots.interfaces';\nimport {StatusAddressToolBarHeight} from '../clientSideScripts/statusAddressToolBarHeight.interfaces';\nimport hideRemoveElements from '../clientSideScripts/hideRemoveElements';\nimport hideScrollBars from '../clientSideScripts/hideScrollbars';\n\n/**\n * Take a full page screenshots for desktop / iOS / Android\n */\nexport async function getBase64FullPageScreenshotsData(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotDataOptions,\n): Promise<FullPageScreenshotsData> {\n  const {\n    addressBarShadowPadding,\n    devicePixelRatio,\n    fullPageScrollTimeout,\n    hideAfterFirstScroll,\n    innerHeight,\n    isAndroid,\n    isAndroidNativeWebScreenshot,\n    isAndroidChromeDriverScreenshot,\n    isIos,\n    toolBarShadowPadding,\n  } = options;\n  const desktopOptions = {\n    devicePixelRatio,\n    fullPageScrollTimeout,\n    hideAfterFirstScroll,\n    innerHeight,\n  };\n  const nativeMobileOptions = {\n    ...desktopOptions,\n    addressBarShadowPadding,\n    toolBarShadowPadding,\n  };\n\n  if (isAndroid && isAndroidNativeWebScreenshot) {\n    // Create a fullpage screenshot for Android when native screenshot (so including status, address and toolbar) is created\n    const statusAddressBarHeight = (\n      <StatusAddressToolBarHeight>(await executor(getAndroidStatusAddressToolBarHeight, OFFSETS.ANDROID))\n    ).statusAddressBar.height;\n    const androidNativeMobileOptions = {...nativeMobileOptions, statusAddressBarHeight};\n\n    return getFullPageScreenshotsDataNativeMobile(takeScreenshot, executor, androidNativeMobileOptions);\n  } else if (isAndroid && isAndroidChromeDriverScreenshot) {\n    const chromeDriverOptions = {devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight};\n\n    // Create a fullpage screenshot for Android when the ChromeDriver provides the screenshots\n    return getFullPageScreenshotsDataAndroidChromeDriver(takeScreenshot, executor, chromeDriverOptions);\n  } else if (isIos) {\n    // Create a fullpage screenshot for iOS. iOS screenshots will hold the status, address and toolbar so they need to be removed\n    const statusAddressBarHeight = (\n      <StatusAddressToolBarHeight>(await executor(getIosStatusAddressToolBarHeight, OFFSETS.IOS))\n    ).statusAddressBar.height;\n    const iosNativeMobileOptions = {...nativeMobileOptions, statusAddressBarHeight};\n\n    return getFullPageScreenshotsDataNativeMobile(takeScreenshot, executor, iosNativeMobileOptions);\n  }\n\n  // Create a fullpage screenshot for all desktops\n  return getFullPageScreenshotsDataDesktop(takeScreenshot, executor, desktopOptions);\n}\n\n/**\n * Take a full page screenshots for native mobile\n */\nexport async function getFullPageScreenshotsDataNativeMobile(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotNativeMobileOptions,\n): Promise<FullPageScreenshotsData> {\n  const viewportScreenshots = [];\n\n  // The addressBarShadowPadding and toolBarShadowPadding is used because the viewport has a shadow on the address and the tool bar\n  // so the cutout of the vieport needs to be a little bit smaller\n  const {\n    addressBarShadowPadding,\n    devicePixelRatio,\n    fullPageScrollTimeout,\n    hideAfterFirstScroll,\n    innerHeight,\n    statusAddressBarHeight,\n    toolBarShadowPadding,\n  } = options;\n  const iosViewportHeight = innerHeight - addressBarShadowPadding - toolBarShadowPadding;\n\n  // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n  const amountOfScrollsArray = [];\n  let scrollHeight: number;\n  let screenshotSizeWidth: number;\n\n  for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n    // Determine and start scrolling\n    const scrollY = iosViewportHeight * i;\n    await executor(scrollToPosition, scrollY);\n\n    // Hide scrollbars before taking a screenshot, we don't want them, on the screenshot\n    await executor(hideScrollBars, true);\n\n    // Simply wait the amount of time specified for lazy-loading\n    await waitFor(fullPageScrollTimeout);\n\n    // Elements that need to be hidden after the first scroll for a fullpage scroll\n    if (i === 1 && hideAfterFirstScroll.length > 0) {\n      await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n    }\n\n    // Take the screenshot and get the width\n    const screenshot = await takeBase64Screenshot(takeScreenshot);\n    screenshotSizeWidth = getScreenshotSize(screenshot, devicePixelRatio).width;\n\n    // Determine scroll height and check if we need to scroll again\n    scrollHeight = await executor(getDocumentScrollHeight);\n    if (((scrollY + iosViewportHeight) < scrollHeight)) {\n      amountOfScrollsArray.push(amountOfScrollsArray.length);\n    }\n    // There is no else\n\n    // The height of the image of the last 1 could be different\n    const imageHeight = amountOfScrollsArray.length === i ? scrollHeight - scrollY : iosViewportHeight;\n\n    // The starting position for cropping could be different for the last image\n    // The cropping always needs to start at status and address bar height and the address bar shadow padding\n    const imageYPosition = (amountOfScrollsArray.length === i ? innerHeight - imageHeight : 0) + statusAddressBarHeight + addressBarShadowPadding;\n\n    // Store all the screenshot data in the screenshot object\n    viewportScreenshots.push({\n      ...calculateDprData({\n        canvasWidth: screenshotSizeWidth,\n        canvasYPosition: scrollY,\n        imageHeight: imageHeight,\n        imageWidth: screenshotSizeWidth,\n        imageYPosition: imageYPosition,\n      }, devicePixelRatio),\n      screenshot,\n    });\n\n    // Show scrollbars again\n    await executor(hideScrollBars, false);\n  }\n\n  // Put back the hidden elements to visible\n  if (hideAfterFirstScroll.length > 0) {\n    await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n  }\n\n  return {\n    ...calculateDprData({\n      fullPageHeight: scrollHeight - addressBarShadowPadding - toolBarShadowPadding,\n      fullPageWidth: screenshotSizeWidth,\n    }, devicePixelRatio),\n    data: viewportScreenshots,\n  };\n}\n\n/**\n * Take a full page screenshot for Android with Chromedriver\n */\nexport async function getFullPageScreenshotsDataAndroidChromeDriver(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotOptions,\n): Promise<FullPageScreenshotsData> {\n  const viewportScreenshots = [];\n  const {devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight} = options;\n\n  // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n  const amountOfScrollsArray = [];\n  let scrollHeight: number;\n  let screenshotSize;\n\n  for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n    // Determine and start scrolling\n    const scrollY = innerHeight * i;\n    await executor(scrollToPosition, scrollY);\n\n    // Hide scrollbars before taking a screenshot, we don't want them, on the screenshot\n    await executor(hideScrollBars, true);\n\n    // Simply wait the amount of time specified for lazy-loading\n    await waitFor(fullPageScrollTimeout);\n\n    // Elements that need to be hidden after the first scroll for a fullpage scroll\n    if (i === 1 && hideAfterFirstScroll.length > 0) {\n      await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n    }\n\n    // Take the screenshot\n    const screenshot = await takeBase64Screenshot(takeScreenshot);\n    screenshotSize = getScreenshotSize(screenshot, devicePixelRatio);\n\n    // Determine scroll height and check if we need to scroll again\n    scrollHeight = await executor(getDocumentScrollHeight);\n    if ((scrollY + innerHeight) < scrollHeight) {\n      amountOfScrollsArray.push(amountOfScrollsArray.length);\n    }\n    // There is no else\n\n    // The height of the image of the last 1 could be different\n    const imageHeight: number = amountOfScrollsArray.length === i ? scrollHeight - (innerHeight * viewportScreenshots.length) : innerHeight;\n    // The starting position for cropping could be different for the last image (0 means no cropping)\n    const imageYPosition = (amountOfScrollsArray.length === i && amountOfScrollsArray.length !== 0) ? innerHeight - imageHeight : 0;\n\n    // Store all the screenshot data in the screenshot object\n    viewportScreenshots.push({\n      ...calculateDprData({\n        canvasWidth: screenshotSize.width,\n        canvasYPosition: scrollY,\n        imageHeight: imageHeight,\n        imageWidth: screenshotSize.width,\n        imageYPosition: imageYPosition,\n      }, devicePixelRatio),\n      screenshot,\n    });\n\n    // Show the scrollbars again\n    await executor(hideScrollBars, false);\n  }\n\n  // Put back the hidden elements to visible\n  if (hideAfterFirstScroll.length > 0) {\n    await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n  }\n\n  return {\n    ...calculateDprData({\n      fullPageHeight: scrollHeight,\n      fullPageWidth: screenshotSize.width,\n    }, devicePixelRatio),\n    data: viewportScreenshots,\n  };\n}\n\n/**\n * Take a full page screenshots\n */\nexport async function getFullPageScreenshotsDataDesktop(\n  takeScreenshot: TakeScreenShot,\n  executor: Executor,\n  options: FullPageScreenshotOptions,\n): Promise<FullPageScreenshotsData> {\n  const viewportScreenshots = [];\n  const {devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight} = options;\n  let actualInnerHeight = innerHeight;\n\n  // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n  const amountOfScrollsArray = [];\n  let scrollHeight: number;\n  let screenshotSize;\n\n  for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n    // Determine and start scrolling\n    const scrollY = actualInnerHeight * i;\n    await executor(scrollToPosition, scrollY);\n\n    // Simply wait the amount of time specified for lazy-loading\n    await waitFor(fullPageScrollTimeout);\n\n    // Elements that need to be hidden after the first scroll for a fullpage scroll\n    if (i === 1 && hideAfterFirstScroll.length > 0) {\n      await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n    }\n\n    // Take the screenshot\n    const screenshot = await takeBase64Screenshot(takeScreenshot);\n    screenshotSize = getScreenshotSize(screenshot, devicePixelRatio);\n\n    // The actual screenshot size might be slightly different than the inner height\n    // In that case, use the screenshot size instead of the innerHeight\n    if (i === 0 && screenshotSize.height !== actualInnerHeight) {\n      if (Math.round(screenshotSize.height) === actualInnerHeight) {\n        actualInnerHeight = screenshotSize.height;\n      }\n      // No else, because some drivers take a full page screenshot, e.g. some versions of FireFox,\n      // and SafariDriver for Safari 11\n    }\n\n    // Determine scroll height and check if we need to scroll again\n    scrollHeight = await executor(getDocumentScrollHeight);\n\n    if (((scrollY + actualInnerHeight) < scrollHeight && screenshotSize.height === actualInnerHeight)) {\n      amountOfScrollsArray.push(amountOfScrollsArray.length);\n    }\n    // There is no else, Lazy load and large screenshots,\n    // like with older drivers such as FF <= 47 and IE11, will not work\n\n    // The height of the image of the last 1 could be different\n    const imageHeight: number = amountOfScrollsArray.length === i\n      ? scrollHeight - (actualInnerHeight * viewportScreenshots.length)\n      : screenshotSize.height;\n    // The starting position for cropping could be different for the last image (0 means no cropping)\n    const imageYPosition = (amountOfScrollsArray.length === i && amountOfScrollsArray.length !== 0) ? actualInnerHeight - imageHeight : 0;\n\n    // Store all the screenshot data in the screenshot object\n    viewportScreenshots.push({\n      ...calculateDprData({\n        canvasWidth: screenshotSize.width,\n        canvasYPosition: scrollY,\n        imageHeight: imageHeight,\n        imageWidth: screenshotSize.width,\n        imageYPosition: imageYPosition,\n      }, devicePixelRatio),\n      screenshot,\n    });\n  }\n\n  // Put back the hidden elements to visible\n  if (hideAfterFirstScroll.length > 0) {\n    await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n  }\n\n  return {\n    ...calculateDprData({\n      fullPageHeight: scrollHeight,\n      fullPageWidth: screenshotSize.width,\n    }, devicePixelRatio),\n    data: viewportScreenshots,\n  };\n}\n\n/**\n * Take a screenshot\n */\nexport async function takeBase64Screenshot(takeScreenshot: TakeScreenShot): Promise<string> {\n  return takeScreenshot();\n}\n"]}