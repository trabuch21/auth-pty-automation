{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../lib/helpers/utils.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {pathExistsSync, removeSync} from 'fs-extra';\nimport {join} from 'path';\nimport {\n  calculateDprData,\n  checkAndroidChromeDriverScreenshot,\n  checkAndroidNativeWebScreenshot,\n  checkIsAndroid,\n  checkIsIos,\n  checkIsMobile,\n  checkTestInBrowser,\n  checkTestInMobileBrowser,\n  formatFileName,\n  getAddressBarShadowPadding,\n  getAndCreatePath,\n  getScreenshotSize,\n  getToolBarShadowPadding,\n  waitFor,\n} from './utils';\nimport {FormatFileNameOptions, GetAndCreatePathOptions} from './utils.interfaces';\nimport {IMAGE_STRING} from '../mocks/mocks';\n\ndescribe('utils', () => {\n\n  describe('getAndCreatePath', () => {\n    const folder = join(process.cwd(), '/.tmp/utils');\n\n    afterEach(() => removeSync(folder));\n\n    it('should create the folder and return the folder name for a device that needs to have it\\s own folder', () => {\n      const options: GetAndCreatePathOptions = {\n        browserName: '',\n        deviceName: 'deviceName',\n        isMobile: true,\n        savePerInstance: true,\n      };\n      const expectedFolderName = join(folder, options.deviceName);\n\n      expect(pathExistsSync(expectedFolderName)).toMatchSnapshot();\n      expect(getAndCreatePath(folder, options)).toEqual(expectedFolderName);\n      expect(pathExistsSync(expectedFolderName)).toMatchSnapshot();\n    });\n\n    it('should create the folder and return the folder name for a browser that needs to have it\\s own folder', () => {\n      const options: GetAndCreatePathOptions = {\n        browserName: 'browser',\n        deviceName: '',\n        isMobile: false,\n        savePerInstance: true,\n      };\n      const expectedFolderName = join(folder, `desktop_${options.browserName}`);\n\n      expect(pathExistsSync(expectedFolderName)).toMatchSnapshot();\n      expect(getAndCreatePath(folder, options)).toEqual(expectedFolderName);\n      expect(pathExistsSync(expectedFolderName)).toMatchSnapshot();\n    });\n\n    it('should create the folder and return the folder name for a browser', () => {\n      const options: GetAndCreatePathOptions = {\n        browserName: 'browser',\n        deviceName: '',\n        isMobile: false,\n        savePerInstance: false,\n      };\n\n      expect(pathExistsSync(folder)).toMatchSnapshot();\n      expect(getAndCreatePath(folder, options)).toEqual(folder);\n      expect(pathExistsSync(folder)).toMatchSnapshot();\n    });\n  });\n\n  describe('formatFileName', () => {\n    const formatFileOptions: FormatFileNameOptions = {\n      browserName: '',\n      browserVersion: '',\n      deviceName: '',\n      devicePixelRatio: 2,\n      formatImageName: '',\n      isMobile: false,\n      isTestInBrowser: true,\n      logName: '',\n      name: '',\n      outerHeight: 768,\n      outerWidth: 1366,\n      platformName: '',\n      platformVersion: '',\n      screenHeight: 900,\n      screenWidth: 1400,\n      tag: 'theTag',\n    };\n\n    it('should format a string with all options provided', () => {\n      formatFileOptions.formatImageName = 'browser.{browserName}-{browserVersion}-platform.{platformName}-{platformVersion}-dpr.{dpr}-{height}-{logName}-{name}-{tag}-{width}';\n      formatFileOptions.browserName = 'chrome';\n      formatFileOptions.browserVersion = '74';\n      formatFileOptions.logName = 'chrome-latest';\n      formatFileOptions.name = 'chrome-name';\n      formatFileOptions.platformName = 'osx';\n      formatFileOptions.platformVersion = '12';\n\n      expect(formatFileName(formatFileOptions)).toMatchSnapshot();\n    });\n\n    it('should format a string for mobile app', () => {\n      formatFileOptions.formatImageName = '{tag}-{mobile}-{dpr}-{width}x{height}';\n      formatFileOptions.deviceName = 'iPhoneX';\n      formatFileOptions.isMobile = true;\n      formatFileOptions.isTestInBrowser = false;\n\n      expect(formatFileName(formatFileOptions)).toMatchSnapshot();\n    });\n\n    it('should format a string for mobile browser', () => {\n      formatFileOptions.formatImageName = '{tag}-{mobile}-{dpr}-{width}x{height}';\n      formatFileOptions.browserName = 'chrome';\n      formatFileOptions.deviceName = 'iPhoneX';\n      formatFileOptions.isMobile = true;\n      formatFileOptions.isTestInBrowser = true;\n\n      expect(formatFileName(formatFileOptions)).toMatchSnapshot();\n    });\n  });\n\n  describe('checkIsMobile', () => {\n    it('should return false when no platform name is provided', () => {\n      expect(checkIsMobile('')).toMatchSnapshot();\n    });\n\n    it('should return true when a platform name is provided', () => {\n      expect(checkIsMobile('ios')).toMatchSnapshot();\n    });\n  });\n\n  describe('checkIsAndroid', () => {\n    it('should return false when no platform name is provided', () => {\n      expect(checkIsAndroid('')).toMatchSnapshot();\n    });\n\n    it('should return false when a platform name is provided that is not accepted', () => {\n      expect(checkIsAndroid('chrome')).toMatchSnapshot();\n    });\n\n    it('should return true when a valid platform name is provided', () => {\n      expect(checkIsAndroid('androId')).toMatchSnapshot();\n    });\n  });\n\n  describe('checkIsIos', () => {\n    it('should return false when no platform name is provided', () => {\n      expect(checkIsIos('')).toMatchSnapshot();\n    });\n\n    it('should return false when a platform name is provided that is not accepted', () => {\n      expect(checkIsIos('chrome')).toMatchSnapshot();\n    });\n\n    it('should return true when a valid platform name is provided', () => {\n      expect(checkIsIos('IoS')).toMatchSnapshot();\n    });\n  });\n\n  describe('checkTestInBrowser', () => {\n    it('should return false when no browser name is provided', () => {\n      expect(checkTestInBrowser('')).toMatchSnapshot();\n    });\n\n    it('should return true when a browser name is provided', () => {\n      expect(checkTestInBrowser('chrome')).toMatchSnapshot();\n    });\n  });\n\n  describe('checkTestInMobileBrowser', () => {\n    it('should return false when no platform name is provided', () => {\n      expect(checkTestInMobileBrowser('', 'chrome')).toMatchSnapshot();\n    });\n\n    it('should return false when a plaform but no browser name is provided', () => {\n      expect(checkTestInMobileBrowser('ios', '')).toMatchSnapshot();\n    });\n\n    it('should return true when a plaform and a browser name is provided', () => {\n      expect(checkTestInMobileBrowser('ios', 'chrome')).toMatchSnapshot();\n    });\n  });\n\n  describe('checkAndroidNativeWebScreenshot', () => {\n    it('should return false when no platform name is provided', () => {\n      expect(checkAndroidNativeWebScreenshot('', false)).toMatchSnapshot();\n    });\n\n    it('should return false when iOS and nativeWebscreenshot true is provided', () => {\n      expect(checkAndroidNativeWebScreenshot('ios', true)).toMatchSnapshot();\n    });\n\n    it('should return false when iOS and nativeWebscreenshot false is provided', () => {\n      expect(checkAndroidNativeWebScreenshot('ios', false)).toMatchSnapshot();\n    });\n\n    it('should return false when Android and nativeWebscreenshot false is provided', () => {\n      expect(checkAndroidNativeWebScreenshot('Android', false)).toMatchSnapshot();\n    });\n\n    it('should return true when Android and nativeWebscreenshot true is provided ', () => {\n      expect(checkAndroidNativeWebScreenshot('Android', true)).toMatchSnapshot();\n    });\n  });\n\n  describe('checkAndroidChromeDriverScreenshot', () => {\n    it('should return false when no platform name is provided', () => {\n      expect(checkAndroidChromeDriverScreenshot('', false)).toMatchSnapshot();\n    });\n\n    it('should return false when iOS and nativeWebscreenshot true is provided', () => {\n      expect(checkAndroidChromeDriverScreenshot('ios', true)).toMatchSnapshot();\n    });\n\n    it('should return false when iOS and nativeWebscreenshot false is provided', () => {\n      expect(checkAndroidChromeDriverScreenshot('ios', false)).toMatchSnapshot();\n    });\n\n    it('should return false when Android and nativeWebscreenshot true is provided', () => {\n      expect(checkAndroidChromeDriverScreenshot('Android', true)).toMatchSnapshot();\n    });\n\n    it('should return true when Android and nativeWebscreenshot false is provided ', () => {\n      expect(checkAndroidChromeDriverScreenshot('Android', false)).toMatchSnapshot();\n    });\n  });\n\n  describe('getAddressBarShadowPadding', () => {\n    const getAddressBarShadowPaddingOptions = {\n      platformName: '',\n      browserName: '',\n      nativeWebScreenshot: false,\n      addressBarShadowPadding: 6,\n      addShadowPadding: false,\n    };\n\n    it('should return 0 when this is a check for a desktop browser', () => {\n      getAddressBarShadowPaddingOptions.browserName = 'chrome';\n\n      expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for an Android app', () => {\n      getAddressBarShadowPaddingOptions.platformName = 'android';\n\n      expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for an iOS app', () => {\n      getAddressBarShadowPaddingOptions.platformName = 'ios';\n\n      expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for Android with a native screenshot but without adding a shadow padding', () => {\n      getAddressBarShadowPaddingOptions.platformName = 'android';\n      getAddressBarShadowPaddingOptions.nativeWebScreenshot = true;\n\n      expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for iOS but without adding a shadow padding', () => {\n      getAddressBarShadowPaddingOptions.platformName = 'iOS';\n      getAddressBarShadowPaddingOptions.nativeWebScreenshot = true;\n\n      expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 6 when this is a check for Android with a native screenshot and adding a shadow padding', () => {\n      getAddressBarShadowPaddingOptions.platformName = 'android';\n      getAddressBarShadowPaddingOptions.nativeWebScreenshot = true;\n      getAddressBarShadowPaddingOptions.addShadowPadding = true;\n\n      expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 6 when this is a check for iOS and adding a shadow padding', () => {\n      getAddressBarShadowPaddingOptions.platformName = 'iOS';\n      getAddressBarShadowPaddingOptions.addShadowPadding = true;\n\n      expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n  });\n\n  describe('getToolBarShadowPadding', () => {\n    it('should return 0 when this is a check for a desktop browser', () => {\n      const getToolBarShadowPaddingOptions = {\n        platformName: '',\n        browserName: 'chrome',\n        toolBarShadowPadding: 6,\n        addShadowPadding: false,\n      };\n\n      expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for an Android app', () => {\n      const getToolBarShadowPaddingOptions = {\n        platformName: 'Android',\n        browserName: '',\n        toolBarShadowPadding: 6,\n        addShadowPadding: false,\n      };\n\n      expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for an iOS app', () => {\n      const getToolBarShadowPaddingOptions = {\n        platformName: 'iOS',\n        browserName: '',\n        toolBarShadowPadding: 6,\n        addShadowPadding: false,\n      };\n\n      expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for an Android app with adding a shadow padding', () => {\n      const getToolBarShadowPaddingOptions = {\n        platformName: 'android',\n        browserName: '',\n        toolBarShadowPadding: 6,\n        addShadowPadding: true,\n      };\n\n      expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for an iOS app with adding a shadow padding', () => {\n      const getToolBarShadowPaddingOptions = {\n        platformName: 'iOS',\n        browserName: '',\n        toolBarShadowPadding: 6,\n        addShadowPadding: true,\n      };\n\n      expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 0 when this is a check for Android browser and adding a shadow padding', () => {\n      const getToolBarShadowPaddingOptions = {\n        platformName: 'android',\n        browserName: 'chrome',\n        toolBarShadowPadding: 6,\n        addShadowPadding: true,\n      };\n\n      expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n\n    it('should return 6 when this is a check for iOS browser and adding a shadow padding', () => {\n      const getToolBarShadowPaddingOptions = {\n        platformName: 'ios',\n        browserName: 'safari',\n        toolBarShadowPadding: 6,\n        addShadowPadding: true,\n      };\n\n      expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot();\n    });\n  });\n\n  describe('calculateDprData', () => {\n    it('should multiple all number values by the dpr value', () => {\n      const data = {\n        a: 1,\n        b: 2,\n        1: 3,\n        a1: 9,\n        bool: true,\n        string: 'string',\n      };\n\n      expect(calculateDprData(data, 2)).toMatchSnapshot();\n    });\n  });\n\n  describe('waitFor', () => {\n    jest.useFakeTimers();\n\n    it('should wait for an amount of seconds and resolves the promise', () => {\n      waitFor(500);\n\n      expect(setTimeout).toHaveBeenCalledTimes(1);\n      expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 500);\n    });\n  });\n\n  describe('getScreenshotSize', () => {\n    it('should get the screenshot size of a screenshot string with the default DPR', () => {\n      expect(getScreenshotSize(IMAGE_STRING)).toMatchSnapshot();\n    });\n\n    it('should get the screenshot size of a screenshot string with DRP 2', () => {\n      expect(getScreenshotSize(IMAGE_STRING, 2)).toMatchSnapshot();\n    });\n  });\n});\n"]}